# Lefthook configuration for Groovy LSP Extension
# https://github.com/evilmartians/lefthook

# Skip execution in CI environment
skip_in_ci: true

pre-commit:
  parallel: true
  commands:
    spotless-check:
      tags: [formatting, java]
      root: "lsp-core/"
      run: ./gradlew spotlessCheck
      skip:
        - merge
        - rebase
      fail_text: |
        Spotlessフォーマットチェックが失敗しました。以下のコマンドで修正してください:
        cd lsp-core && ./gradlew spotlessApply
    
    errorprone-check:
      tags: [static-analysis, java]
      root: "lsp-core/"
      run: ./gradlew compileJava compileTestJava -PerrorproneEnabled=true
      skip:
        - merge
        - rebase
      fail_text: |
        Error Proneがコードの問題を検出しました。出力を確認して問題を修正してください。
    
    biome-lint:
      tags: [linting, typescript]
      root: "vscode-extension/"
      glob: "*.{js,ts,jsx,tsx}"
      run: npx biome check --fix --unsafe {staged_files}
      stage_fixed: true
      skip:
        - merge
        - rebase
      fail_text: |
        Biomeリントエラーが検出されました。自動修正を試みています。
    
    typescript-check:
      tags: [type-check, typescript]
      root: "vscode-extension/"
      glob: "*.{ts,tsx}"
      run: ./node_modules/.bin/tsc --noEmit
      skip:
        - merge
        - rebase
      fail_text: |
        TypeScriptの型エラーが検出されました。
        エラーの詳細を確認して修正してください。
    
    generate-scenarios:
      tags: [test, typescript]
      root: "vscode-extension/"
      glob: 
        - "vscode-extension/src/test/**/*.{test,spec}.ts"
        - "vscode-extension/scripts/generate-test-scenarios.ts"
      run: npm run test:scenarios  && git add src/test/SCENARIOS.md
      stage_fixed: true
      skip:
        - merge
        - rebase
      fail_text: |
        テストシナリオの生成に失敗しました。

pre-push:
  parallel: false
  follow: true 
  commands:
    java-tests:
      tags: [test, java]
      root: "lsp-core/"
      run: ./gradlew test
      fail_text: |
        Javaテストが失敗しました。すべてのテストが成功してからプッシュしてください。
        './gradlew test' を実行して失敗したテストを確認
        根本原因から対応して短絡的な修正は避けてください
    
    java-integration-tests:
      tags: [test, java, integration]
      root: "lsp-core/"
      run: ./gradlew :test --tests "*IntegrationTest"
      fail_text: |
        統合テストが失敗しました。すべての統合テストが成功してからプッシュしてください。
        根本原因から対応して短絡的な修正は避けてください
    
    typescript-tests:
      tags: [test, typescript]
      root: "vscode-extension/"
      run: timeout 240 npm run test || (echo "テストがタイムアウトしました。テストを確認してください。" && exit 1)
      fail_text: |
        TypeScriptテストが失敗しました。すべてのテストが成功してからプッシュしてください。
        'npm run test' を実行して失敗したテストを確認
        根本原因から対応して短絡的な修正は避けてください
    
    coverage-check:
      tags: [coverage, java]
      root: "lsp-core/"
      run: ./gradlew jacocoTestReport jacocoTestCoverageVerification
      fail_text: |
        コードカバレッジが要件を満たしていません（80%以上必要）。
        カバレッジを向上させるためにテストを追加してください。

# その他のGitフック設定
commit-msg:
  commands:
    conventional-commit:
      run: |
        # コミットメッセージがConventional Commits仕様に準拠しているかチェック
        # 最初の行のみをチェック（タイトル行）
        commit_regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+$'
        first_line=$(head -n 1 {1})
        if ! echo "$first_line" | grep -qE "$commit_regex"; then
          echo "コミットメッセージがConventional Commits仕様に準拠していません！"
          echo "形式: <type>(<scope>): <subject>"
          echo "例: feat(lsp): add hover support for Spock tests"
          echo ""
          echo "使用可能なタイプ:"
          echo "  feat:     新機能"
          echo "  fix:      バグ修正"
          echo "  docs:     ドキュメント更新"
          echo "  style:    コードフォーマット（機能に影響なし）"
          echo "  refactor: リファクタリング（新機能でもバグ修正でもない）"
          echo "  perf:     パフォーマンス改善"
          echo "  test:     テストの追加または修正"
          echo "  build:    ビルドシステムまたは外部依存の変更"
          echo "  ci:       CI設定ファイルとスクリプトの変更"
          echo "  chore:    srcまたはtestファイルを変更しないその他の変更"
          echo "  revert:   以前のコミットを取り消し"
          exit 1
        fi